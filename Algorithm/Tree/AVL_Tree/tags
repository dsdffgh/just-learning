!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	qualified	/Include an extra class-qualified tag entry for each tag/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	access	/Access (or export) of class members/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	inherits	/Inheritance information/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	language	/Language of input file containing tag/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	signature	/Signature of routine (e.g. prototype or parameter list)/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	p,prototype	/function prototypes/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	C:/Users/Theonesssssssss/Documents/Workspace/just-learning/Algorithm/Tree/AVL_Tree/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
AVLNode	./AVL.h	/^struct AVLNode$/;"	s	language:C++
AVLNode::data	./AVL.h	/^	int data;$/;"	m	language:C++	struct:AVLNode	typeref:typename:int	access:public
AVLNode::left	./AVL.h	/^	AVLNode *left;$/;"	m	language:C++	struct:AVLNode	typeref:typename:AVLNode *	access:public
AVLNode::right	./AVL.h	/^	AVLNode *right;$/;"	m	language:C++	struct:AVLNode	typeref:typename:AVLNode *	access:public
Delete	./AVL.cpp	/^AVLNode *Delete(AVLNode *current, int data)$/;"	f	language:C++	typeref:typename:AVLNode *	signature:(AVLNode * current,int data)
Delete	./AVL.h	/^AVLNode *Delete(AVLNode *current, int data);$/;"	p	language:C++	typeref:typename:AVLNode *	signature:(AVLNode * current,int data)
Find	./AVL.cpp	/^AVLNode *Find(AVLNode *current, int data)$/;"	f	language:C++	typeref:typename:AVLNode *	signature:(AVLNode * current,int data)
Find	./AVL.h	/^AVLNode *Find(AVLNode *current, int data);$/;"	p	language:C++	typeref:typename:AVLNode *	signature:(AVLNode * current,int data)
FindMax	./AVL.cpp	/^AVLNode *FindMax(AVLNode *current)$/;"	f	language:C++	typeref:typename:AVLNode *	signature:(AVLNode * current)
FindMax	./AVL.h	/^AVLNode *FindMax(AVLNode *current);$/;"	p	language:C++	typeref:typename:AVLNode *	signature:(AVLNode * current)
FindMin	./AVL.cpp	/^AVLNode *FindMin(AVLNode *current)$/;"	f	language:C++	typeref:typename:AVLNode *	signature:(AVLNode * current)
FindMin	./AVL.h	/^AVLNode *FindMin(AVLNode *current);$/;"	p	language:C++	typeref:typename:AVLNode *	signature:(AVLNode * current)
GetBalancingFactor	./AVL.cpp	/^int GetBalancingFactor(AVLNode *current)$/;"	f	language:C++	typeref:typename:int	signature:(AVLNode * current)
GetBalancingFactor	./AVL.h	/^int GetBalancingFactor(AVLNode *current);$/;"	p	language:C++	typeref:typename:int	signature:(AVLNode * current)
GetHeightOfNode	./AVL.cpp	/^int GetHeightOfNode(AVLNode *current)$/;"	f	language:C++	typeref:typename:int	signature:(AVLNode * current)
GetHeightOfNode	./AVL.h	/^int GetHeightOfNode(AVLNode *current);$/;"	p	language:C++	typeref:typename:int	signature:(AVLNode * current)
GetNewNode	./AVL.cpp	/^AVLNode *GetNewNode(int data)$/;"	f	language:C++	typeref:typename:AVLNode *	signature:(int data)
GetNewNode	./AVL.h	/^AVLNode *GetNewNode(int data);$/;"	p	language:C++	typeref:typename:AVLNode *	signature:(int data)
Getsuccessor	./AVL.cpp	/^AVLNode *Getsuccessor(AVLNode *root, int data)$/;"	f	language:C++	typeref:typename:AVLNode *	signature:(AVLNode * root,int data)
Getsuccessor	./AVL.h	/^AVLNode *Getsuccessor(AVLNode *root, int data);$/;"	p	language:C++	typeref:typename:AVLNode *	signature:(AVLNode * root,int data)
InorderTraverrsal	./AVL.cpp	/^void InorderTraverrsal(AVLNode *current)$/;"	f	language:C++	typeref:typename:void	signature:(AVLNode * current)
InorderTraverrsal	./AVL.h	/^void InorderTraverrsal(AVLNode *current);$/;"	p	language:C++	typeref:typename:void	signature:(AVLNode * current)
InorderTraverrsal_universal	./AVL.cpp	/^void InorderTraverrsal_universal(AVLNode *current)$/;"	f	language:C++	typeref:typename:void	signature:(AVLNode * current)
InorderTraverrsal_universal	./AVL.h	/^void InorderTraverrsal_universal(AVLNode *current);$/;"	p	language:C++	typeref:typename:void	signature:(AVLNode * current)
Insert	./AVL.cpp	/^AVLNode *Insert(AVLNode *current, int data)$/;"	f	language:C++	typeref:typename:AVLNode *	signature:(AVLNode * current,int data)
Insert	./AVL.h	/^AVLNode *Insert(AVLNode *current, int data);$/;"	p	language:C++	typeref:typename:AVLNode *	signature:(AVLNode * current,int data)
IsAVL	./AVL.cpp	/^bool IsAVL(AVLNode* root) {$/;"	f	language:C++	typeref:typename:bool	signature:(AVLNode * root)
IsBST	./AVL.cpp	/^bool IsBST(AVLNode *current, int MinVal, int MaxVal)$/;"	f	language:C++	typeref:typename:bool	signature:(AVLNode * current,int MinVal,int MaxVal)
IsBST	./AVL.h	/^bool IsBST(AVLNode *current, int MinVal = INT32_MIN, int MaxVal = INT32_MAX);$/;"	p	language:C++	typeref:typename:bool	signature:(AVLNode * current,int MinVal=INT32_MIN,int MaxVal=INT32_MAX)
LeftRotate	./AVL.cpp	/^void LeftRotate(AVLNode *current)$/;"	f	language:C++	typeref:typename:void	signature:(AVLNode * current)
LeftRotate	./AVL.h	/^void LeftRotate(AVLNode *current);$/;"	p	language:C++	typeref:typename:void	signature:(AVLNode * current)
LevelOrderTraversal	./AVL.cpp	/^void LevelOrderTraversal(AVLNode *current)$/;"	f	language:C++	typeref:typename:void	signature:(AVLNode * current)
LevelOrderTraversal	./AVL.h	/^void LevelOrderTraversal(AVLNode *current);$/;"	p	language:C++	typeref:typename:void	signature:(AVLNode * current)
RightRotate	./AVL.cpp	/^void RightRotate(AVLNode *current)$/;"	f	language:C++	typeref:typename:void	signature:(AVLNode * current)
RightRotate	./AVL.h	/^void RightRotate(AVLNode *current);$/;"	p	language:C++	typeref:typename:void	signature:(AVLNode * current)
Rotate	./AVL.cpp	/^void Rotate(AVLNode *current)$/;"	f	language:C++	typeref:typename:void	signature:(AVLNode * current)
Rotate	./AVL.h	/^void Rotate(AVLNode *current);$/;"	p	language:C++	typeref:typename:void	signature:(AVLNode * current)
__AVL_H_	./AVL.h	/^#define __AVL_H_$/;"	d	language:C++
data	./AVL.h	/^	int data;$/;"	m	language:C++	struct:AVLNode	typeref:typename:int	access:public
isAVL	./AVL.h	/^bool isAVL(AVLNode* root);$/;"	p	language:C++	typeref:typename:bool	signature:(AVLNode * root)
left	./AVL.h	/^	AVLNode *left;$/;"	m	language:C++	struct:AVLNode	typeref:typename:AVLNode *	access:public
main	./AVL.cpp	/^int main()$/;"	f	language:C++	typeref:typename:int	signature:()
operator <<	./AVL.cpp	/^ostream &operator<<(ostream &os, const AVLNode &Node)$/;"	f	language:C++	typeref:typename:ostream &	signature:(ostream & os,const AVLNode & Node)
operator <<	./AVL.h	/^ostream &operator<<(ostream &os, const AVLNode &Node);$/;"	p	language:C++	typeref:typename:ostream &	signature:(ostream & os,const AVLNode & Node)
preorderTraversal_Iterate	./AVL.cpp	/^void preorderTraversal_Iterate(AVLNode *current)$/;"	f	language:C++	typeref:typename:void	signature:(AVLNode * current)
preorderTraversal_Iterate	./AVL.h	/^void preorderTraversal_Iterate(AVLNode *current);$/;"	p	language:C++	typeref:typename:void	signature:(AVLNode * current)
preorderTraversal_recursion	./AVL.cpp	/^void preorderTraversal_recursion(AVLNode *current)$/;"	f	language:C++	typeref:typename:void	signature:(AVLNode * current)
preorderTraversal_recursion	./AVL.h	/^void preorderTraversal_recursion(AVLNode *current);$/;"	p	language:C++	typeref:typename:void	signature:(AVLNode * current)
right	./AVL.h	/^	AVLNode *right;$/;"	m	language:C++	struct:AVLNode	typeref:typename:AVLNode *	access:public
